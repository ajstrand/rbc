(* Grako EBNF file for B grammar. This is used to generate the rbc/parser.py
 * file. Do so via:
 *
 *      python -m grako -o rbc/parser.py B.ebnf
 *)

(* PL/I comments. *)
@@comments :: ?//\*((?:[^\*]|\*[^/]|\n)*?)\*+//?

(* This grammar should have no left recursion. *)
@@left_recursion :: False

(* This grammar is transliterated from that in section 2.1 of the 1972
 * memorandum by Thompson (KT). It's further updated from descriptions in the
 * users' reference manual for B on the MH-TSS by Johnson (SCJ). *)

(* program *)
program = @:{ definition ~ } $ ;

(* definition *)
definition = simpledef | vectordef | functiondef ;

simpledef = name:name init:[ival] ';' ;

vectordef = name:name '[' [ maxidx:constantexpr ] ']' [ ivals:ivallist ] ';' ;

ivallist = @+:ival { ',' @+:ival } ;

ival = numericexpr | characterexpr | stringexpr ;

functiondef = name:name '(' [ args:namelist ] ')' ~ body:statement ;

(* statement *)
statement = labelstatement | gotostatement | switchstatement | casestatement
          | breakstatement | autostatement | extrnstatement | compoundstatement
          | ifstatement | whilestatement | returnstatement | exprstatement
          | nullstatement ;

labelstatement = !('default') label:name ':' statement:statement ;

gotostatement = 'goto' ~ label:name ';' ;

switchstatement = 'switch' ~ rvalue:expr ~ body:statement ;

casestatement = ( ( 'case' cond:constantexpr ) | 'default' ) ~ ':'
                then:statement ;

breakstatement = 'break' ';' ;

autostatement = 'auto' ~ @+:autovar { ',' @+:autovar } ';' ;

autovar = name:name [ '[' maxidx:constantexpr ']' ] ;

extrnstatement = 'extrn' ~ @:namelist ';' ;

compoundstatement = '{' ~ @:{ statement ~ } '}' ;

ifstatement =
    'if' ~ '(' cond:expr ')' then:statement [ 'else' otherwise:statement ] ;

whilestatement = 'while' ~ '(' cond:expr ')' body:statement ;

returnstatement = 'return' ~ [ '(' return_value:expr ')' ] ';' ;

exprstatement = @:expr ';' ;

nullstatement = ';' ;

(* Expressions in B are sufficiently C-like that the traditional way of
 * expressing C-style expressions in PEGs may readily be adapted. We avoid
 * left-recursion in left-to-right binding operators by expressing the grammar
 * as a head followed by zero or more tail elements. The head and tail elements
 * consuming expressions with higher precedence. Right-to-left binding operators
 * are expressed via right-recursion since this poses no problem in PEGs.
 *
 * The grammar in KT expressed the fundamental rvalue/lvalue distinction
 * directly in the grammar by grouping variable references, usage of the
 * dereference operator and vector indexing expressions into a separate lvalue
 * rule. In our implementation we track the difference by way of the type system
 * (such as it is) which means that the dereference operator becomes,
 * syntactically, just another unary operation. This is consistent with the
 * precedence rules noted in SCJ. *)

(* The lowest precedence expression is an assignment expression. *)
expr = assignexpr ;

(* assignment operator - rtl *)
assignexpr = lhs:condexpr [ op:assignop rhs: assignexpr ] ;

(* this monster regex matches any B assignment operator *)
assignop = ?/=([+\-/\*%&^|]|[=!]=|>[=>]?|<[=<]?)?/? ;

(* conditional operator - rtl *)
condexpr = cond:orexpr [ '?' then:condexpr ':' otherwise:condexpr ] ;

(* logical operators - ltr *)
orexpr = lhs:xorexpr tail:{ortail} ;

ortail = op:'|' rhs:xorexpr ;

xorexpr = lhs:andexpr tail:{xortail} ;

xortail = op:'^' rhs:andexpr ;

andexpr = lhs:eqexpr tail:{andtail} ;

andtail = op:'&' rhs:eqexpr ;

(* equality operator - ltr *)
eqexpr = lhs:relexpr tail:{eqtail} ;

eqtail = op:eqop rhs:relexpr ;

eqop = /[!=]=/ ;

(* relational operator - ltr *)
relexpr = lhs:shiftexpr tail:{reltail} ;

reltail = op:relop rhs:shiftexpr ;

relop = /[<>]={0,1}/ ;

(* shift operator - ltr *)
shiftexpr = lhs:addexpr tail:{shifttail} ;

shifttail = op:shiftop rhs:addexpr ;

shiftop = /<<|>>/ ;

(* additive operator - ltr *)
addexpr = lhs:multexpr tail:{addtail} ;

addtail = op:addop rhs:multexpr ;

addop = /[+-]/ ;

(* multiplicative operator - ltr *)
multexpr = lhs:unaryexpr tail:{multtail} ;

multtail = op:multop rhs:unaryexpr ;

multop = ?/[/%\*]/? ;

(* unary operator - rtl *)
unaryexpr = leftops:{leftunaryop} rhs:primaryexpr rightops:{rightunaryop} ;

leftunaryop = /[\*&!\~]|--?|\+\+/ ;

rightunaryop = '++' | '--' ;

(* primary expression *)
primaryexpr = head:primaryexprhead tail:{primaryexprtail} ;

primaryexprhead = '(' @:expr ')' | builtinexpr | variableexpr | constantexpr
                | stringexpr ;

primaryexprtail = '(' [ args:exprlist ] ')' | '[' index:expr ']' ;

variableexpr = !builtinexpr name ;

constantexpr = numericexpr | characterexpr ;

builtinexpr = '__bytes_per_word' ;

numericexpr = { NUMERIC }+ ;

characterexpr = "'" @:{ CHARACTERCONSTCHAR } "'" ;

stringexpr = '"' @:{ STRINGCONSTCHAR } '"' ;

(* SCJ: "The characters A through Z, a through z, _, ., and backspace are
 * alphabetic characters and may be used in names. The characters 0 through 9
 * are digits and may be used in constants or names; however, a name may not
 * begin with a digit."
 *
 * It seems dangerous to allow backspace as part of a name but we should strive
 * for authenticity! *)
name = head:ALPHA tail:{ ALPHA | NUMERIC } ;

ALPHA = /[A-Za-z_\.\b]/ ;

NUMERIC = /[0-9]/ ;

CHARACTERCONSTCHAR = /([^'\*])|(\*.)/ ;

STRINGCONSTCHAR = /([^"\*])|(\*.)/ ;

(* comma separated lists *)

exprlist = @+:expr { ',' @+:expr } ;

namelist = @+:name { ',' @+:name } ;
